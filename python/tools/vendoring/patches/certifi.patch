--- ./python/cog/_vendor/certifi/core.py	2024-04-15 18:08:25
+++ ./python/cog/_vendor/certifi/core.py.new	2024-04-15 18:21:12
@@ -37,14 +37,14 @@
             # We also have to hold onto the actual context manager, because
             # it will do the cleanup whenever it gets garbage collected, so
             # we will also store that at the global level as well.
-            _CACERT_CTX = as_file(files("certifi").joinpath("cacert.pem"))
+            _CACERT_CTX = as_file(files("cog._vendor.certifi").joinpath("cacert.pem"))
             _CACERT_PATH = str(_CACERT_CTX.__enter__())
             atexit.register(exit_cacert_ctx)
 
         return _CACERT_PATH
 
     def contents() -> str:
-        return files("certifi").joinpath("cacert.pem").read_text(encoding="ascii")
+        return files("cog._vendor.certifi").joinpath("cacert.pem").read_text(encoding="ascii")
 
 elif sys.version_info >= (3, 7):
 
@@ -73,14 +73,14 @@
             # We also have to hold onto the actual context manager, because
             # it will do the cleanup whenever it gets garbage collected, so
             # we will also store that at the global level as well.
-            _CACERT_CTX = get_path("certifi", "cacert.pem")
+            _CACERT_CTX = get_path("cog._vendor.certifi", "cacert.pem")
             _CACERT_PATH = str(_CACERT_CTX.__enter__())
             atexit.register(exit_cacert_ctx)
 
         return _CACERT_PATH
 
     def contents() -> str:
-        return read_text("certifi", "cacert.pem", encoding="ascii")
+        return read_text("cog._vendor.certifi", "cacert.pem", encoding="ascii")
 
 else:
     import os
@@ -111,4 +111,4 @@
         return os.path.join(f, "cacert.pem")
 
     def contents() -> str:
-        return read_text("certifi", "cacert.pem", encoding="ascii")
+        return read_text("cog._vendor.certifi", "cacert.pem", encoding="ascii")
