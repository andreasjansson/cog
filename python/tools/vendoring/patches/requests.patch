--- ./python/cog/_vendor/requests/packages.py	2024-04-15 18:07:15
+++ ./python/cog/_vendor/requests/packages.py.new	2024-04-15 18:08:05
@@ -1,28 +1,20 @@
 import sys
 
-try:
-    import chardet
-except ImportError:
-    import warnings
+import warnings
+from cog._vendor import charset_normalizer as chardet
+warnings.filterwarnings("ignore", "Trying to detect", module="charset_normalizer")
 
-    import charset_normalizer as chardet
-
-    warnings.filterwarnings("ignore", "Trying to detect", module="charset_normalizer")
-
 # This code exists for backwards compatibility reasons.
 # I don't like it either. Just look the other way. :)
 
 for package in ("urllib3", "idna"):
-    locals()[package] = __import__(package)
+    vendored_package = "cog._vendor." + package
+    locals()[package] = __import__(vendored_package)
     # This traversal is apparently necessary such that the identities are
     # preserved (requests.packages.urllib3.* is urllib3.*)
     for mod in list(sys.modules):
-        if mod == package or mod.startswith(f"{package}."):
-            sys.modules[f"requests.packages.{mod}"] = sys.modules[mod]
+        if mod == vendored_package or mod.startswith(vendored_package + '.'):
+            unprefixed_mod = mod[len("cog._vendor."):]
+            sys.modules['cog._vendor.requests.packages.' + unprefixed_mod] = sys.modules[mod]
 
-target = chardet.__name__
-for mod in list(sys.modules):
-    if mod == target or mod.startswith(f"{target}."):
-        target = target.replace(target, "chardet")
-        sys.modules[f"requests.packages.{target}"] = sys.modules[mod]
 # Kinda cool, though, right?
